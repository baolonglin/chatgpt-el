#!/usr/bin/env node

// https://pptr.dev/
const readline = require('readline');
const puppeteer = require('puppeteer');
const convert = require('html-to-text');

// For debugging.
function die (msg='aborted') {
    console.log('** ', msg);
    process.exit(1);
}
    
async function current_page () {
    // FIXME: Port number should be configurable.
    const browser = await puppeteer.connect({browserURL: 'http://localhost:9000'});
    // Find the page in the first tab.
    const pages = await browser.pages();
    let page = pages[0];
    // Open ChatGPT if not already visiting.
    const url = page.url();
    if (url.indexOf('chat.openai.com') < 0) {
	await page.goto('https://chat.openai.com/');
	const text = await page.waitForSelector('textarea');
    }
    return page;
}

async function extract_reply (page) {
    // Note: All replies are in DIV tags with markdown class.
    const elems = await page.$$('div.markdown');
    const elem = elems[elems.length - 1];
    // Replies might be empty.
    if (!elem)
	return '';
    const html = await page.evaluate(e => e.innerHTML, elem);
    return html;
}
    
async function send (buf) {
    // Fill the textarea with string BUF and submit the form.
    const page = await current_page();
    const text = await page.$('textarea');
    await text.type(buf);
    await text.press('Enter');
}

async function recv (debug) {
    const page = await current_page();
    let html = await extract_reply(page);
    html = html.replaceAll(/<button.*?<\/button>/g, '');
    let text = convert.convert(html, {
        preserveNewlines: true,
        wordwrap: false,
    });
    if (debug)
	text = html;
    process.stdout.write(text);
}

// argv[2] is the first user-specified argument.
const mode = process.argv[2];
const debug = (process.argv.length >= 4);

// Send mode.
if (mode == '-s') {
    // Read lines from STDIN.
    const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
    });
    let buf = '';
    rl.on('line', function (line) {
	buf += line + '\n';
    });
    rl.on('close', function() {
	(async () => {
	    await send(buf);
	    process.exit(0);
	})();
    });
}

// Receive mode.
if (mode == '-r') {
    (async () => {
	await recv(debug);
	process.exit(0);
    })();
}
